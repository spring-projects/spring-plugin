<?xml version="1.0" encoding="UTF-8" ?>
<xsd:schema xmlns="http://www.springframework.org/schema/plugin/integration" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:tool="http://www.springframework.org/schema/tool"
    targetNamespace="http://www.springframework.org/schema/plugin/integration" elementFormDefault="qualified"
    attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.springframework.org/schema/tool" />

    <xsd:element name="dynamic-service-activator">
    	<xsd:annotation>
    		<xsd:appinfo>
    			<xsd:documentation>
					This service activator will be backed by a Hera Plugin registry that
					allows dynamic invocation of Spring beans implementing the plugin
					interface defined in "plugin-type". We will dynamically pick up all
					Spring beans implementing that interface and create a PluginRegistry
					of those. See org.springframework.plugin.integration.PluginMethodInvocationService for
					details.
				</xsd:documentation>
    		</xsd:appinfo>
    	</xsd:annotation>
    	<xsd:complexType>
    		<xsd:attribute name="input-channel" type="xsd:string" use="required">
    			<xsd:annotation>
    				<xsd:documentation>The input channel to listen to.</xsd:documentation>
    			</xsd:annotation>
    		</xsd:attribute>
    		<xsd:attribute name="plugin-type" type="classType" use="required">
    			<xsd:annotation>
    				<xsd:documentation>The type of Spring beans to dynamically pick up.</xsd:documentation>
    			</xsd:annotation>
    		</xsd:attribute>
    		<xsd:attribute name="method" type="xsd:string" use="required">
    			<xsd:annotation>
    				<xsd:documentation>The method to be invoked on the plugin(s) selected.</xsd:documentation>
    			</xsd:annotation>
    		</xsd:attribute>
    		<xsd:attribute name="output-channel" type="xsd:string">
    			<xsd:annotation>
    				<xsd:documentation>The output channel to publish invocation results to.</xsd:documentation>
    			</xsd:annotation>
    		</xsd:attribute>
    		<xsd:attribute name="delimiter" type="xsd:string">
    			<xsd:annotation>
    				<xsd:documentation>
    					A SpEL expression to extract the delimiter to be used from the
    					incoming Message. If not set the entire Message will be used as
    					delimiter.
    				</xsd:documentation>
    			</xsd:annotation>
    		</xsd:attribute>
    		<xsd:attribute name="invocation-arguments" type="xsd:string">
    			<xsd:annotation>
    				<xsd:documentation>
    					A SpEL expression to extract the arguments for the actual method
    					invocation.
    				</xsd:documentation>
    			</xsd:annotation>
    		</xsd:attribute>
    		<xsd:attribute name="plugin-lookup-method" type="pluginLookupMethod" default="one">
    			<xsd:annotation>
    				<xsd:documentation>
    					Defines whether to invoke the first plugin matching the delimiter
    					(default) or all found. Order of the plugins will be considered.
    				</xsd:documentation>
    			</xsd:annotation>
    		</xsd:attribute>
    	</xsd:complexType>
    </xsd:element>

    <xsd:simpleType name="pluginLookupMethod">
    	<xsd:restriction base="xsd:string">
    		<xsd:enumeration value="one" />
    		<xsd:enumeration value="all" />
    	</xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="classType">
        <xsd:annotation>
            <xsd:appinfo>
                <tool:annotation kind="direct">
                    <tool:expected-type type="java.lang.Class" />
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:union memberTypes="xsd:string" />
    </xsd:simpleType>

</xsd:schema>
